#!/bin/bash


PROJECT_DIR=`dirname "$0"`

# importing style variables
source $PROJECT_DIR/configuration/style.sh

# importing environment variables set in .env
if [ -f .env ]; then
    source $PROJECT_DIR/configuration/.env
else;
    echo "${red}Can't find environment variables from .env file.${none}"
fi


function runwebserver(){
    ./manage.py migrate
    # open a new tab in the default browser in a new window
    /usr/bin/open --new -a $DEFAULT_BROWSER --args --new-window $REDIRECT_URI
    ./manage.py runserver
}

if [ -z "$1" ]; then
    python3 $PROJECT_DIR/configuration/tools.py app_commands
    echo "\n"
    echo "COPYRIGHT Â© Simon Pointeau 2022."
    echo ""

elif [ "$1" = "startproject" -o "$1" = "-s" ]; then
    # going through the new website folder
    path websites && cd websites
    if [ -z "$2" ]; then
        echo "\nYOU ARE STARTING A NEW WEBSITE PROJECT"
        vared -p "Enter your new project name : " -c webname
    else;
        webname=$2
        echo "\nYOU ARE STARTING A NEW WEBSITE PROJECT as \033[1;32m'$webname'${none}"
    fi
    echo -n "Going into the project folder...\n"
    mkdir $webname
	cd $webname

    # virtual environment
    vname="base"
    echo "\n---${yellowB} CREATING NEW VIRTUAL ENVIRONMENT AS '$vname' ${none}---"
    python3 -m venv $vname
    source $vname/bin/activate
    echo ">>> virtualenv activated."

    # modules installation
    echo "\n---${yellowB} PIP VERSION UPDATE ${none}---"
    python -m pip install --upgrade pip > /dev/null    
    python -m pip --version && echo ">>> updated to last version."

    echo "\n---${yellowB} INSTALLING REQUIREMENTS ${none}---"
    pip3 install --progress-bar 'ascii' -r $PROJECT_DIR/configuration/requirements.txt > /dev/null
    if [ $? -eq 0 ];
        then
            echo ">>> required packages installed successfully."
        else;
            echo ">>> can't install requirements, please check these dependances."
    fi

    sleep 0.5s
    echo "\n---${yellowB} DATABASE INITIALIZATION ${none}---"
    django-admin startproject $webname

    # brew services (re)start postgresql
    brew services start postgresql
    createdb -O $USER $webname
	echo ">>> database created as '$webname'."

    # setting the website pattern
    cd $webname
    cp -r $PROJECT_DIR/pattern/static ./
    python manage.py startapp website
    cd website
    cp -r $PROJECT_DIR/pattern/templates ./
    cd .. > /dev/null
    python $PROJECT_DIR/configuration/edit_settings.py $webname
    cd .. > /dev/null

    # git repository initialization
    echo -e "\n---${yellowB} GIT REPOSITORY INITIALIZATION ${none}---"
    echo "# $webname" >> README.md && echo -n ">>> "
    git init
    echo "# macOS users\n.DS_Store" >> .gitignore

    # git commits
    git add .gitignore
    git commit -m "negleted files" >/dev/null

    git add README.md
    git commit -m "project description" >/dev/null

    git add $vname/
    git commit -m "virtual environment" >/dev/null

    git add $webname/
    git commit -m "django website" >/dev/null

    git branch -M main

    # git repository initialization
    /usr/bin/open --new -a "/Applications/Google Chrome.app" --args --new-window 'https://github.com/new'
    echo "\nOpening a window GitHub tab..." && sleep 2
    echo "Can't see the GitHub tab ? Go to https://github.com/new"
    
    # loop initialization : repository verification
    loop=1
    while ! [[ $loop -eq 0 ]];
    do
        echo ""
        vared -p "Please add the remote link of the new repository : " -c remotelink
        git remote add origin $remotelink
        if [ $? -eq 0 ]; then
            loop=0
        fi
    done
    echo ""
    git push -u origin main 2>/dev/null
    echo "${yellowB}>>> Project added to a new repository.${none}"
    cd $webname > /dev/null

    # final display
    echo ""
    echo "\033[1;32mCongratulations${none} : your project is ready to go !"
    vared -p "Do you want to run the server [y/n] ? " -c run
    echo ""
    if [ $run = "y" ]; then
        runwebserver
    fi

elif [ "$1" = "runproject" -o "$1" = "-rp" ]; then

    path websites && cd websites

    if [ -z "$2" ]; then

        projects=($(python3 $PROJECT_DIR/configuration/tools.py loadable_projects $PWD))

        echo "\navailable projects :"
        for project in $projects;
        do
            echo ">> \033[1;32m$project${none}"
        done

        echo ""
        vared -p "%B%F{yellow}select project :%f " -c projectinput

    else;
        projectinput="$2"
    
    fi

    # Checking if the project folder is existing or not to run it
    if [ -d "`pwd`/$projectinput" ] && [[ " ${projects[*]} " =~ " ${projectinput} " ]]
    then
        echo "Opening project \033[1;32m$projectinput${none} into a web window...\n"
        path websites && cd websites
        cd $projectinput && source base/bin/activate && cd $projectinput
        runwebserver
    else;
        echo "This project \"$projectinput\" doesn't exist.\n"
    fi
    
fi